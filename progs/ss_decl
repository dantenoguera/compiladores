let f (x : Nat) : Nat = succ x

let suc2 (x y: Nat) (z:Nat) : Nat = succ (succ x)

let g (x y z : Nat) : Nat = x

let rec suma (x y: Nat) : Nat = ifz x then y else succ (suma (pred x) y)

let x : Nat = 10

type Const = Nat

let y : Const = 10

type Fun = Nat -> Nat

let h : Fun = succ
