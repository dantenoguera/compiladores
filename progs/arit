let rest = 
    fix (f : Nat -> Nat -> Nat) (m : Nat) ->
        fun (n : Nat) ->
            ifz n then m else pred(f m (pred n))

let sum = 
    fix (f : Nat -> Nat -> Nat) (m : Nat) ->
        fun (n : Nat) ->
            ifz n then m else succ(f m (pred n))

let mult = 
    fix (f : Nat -> Nat -> Nat) (m : Nat) ->
        fun (n : Nat) ->
            ifz n then 0 else sum m (f m (pred n))

let exp =
    fix (f: Nat -> Nat -> Nat) (m: Nat) ->
        fun (n: Nat) ->
            ifz n then 1 else mult m (f m (pred n))

let fact = 
    fix (f : Nat -> Nat) (m : Nat) ->
        ifz m then 1 else mult m (f (pred m))
